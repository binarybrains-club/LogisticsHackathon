---
interface Props {
  targetDate?: string;
}

const { targetDate } = Astro.props;
---

<div class="flex gap-4 mb-8" id="countdown-container">
  <div class="w-16 h-26 md:w-24 md:h-32" id="days-counter">
    <div class="w-16 h-18 md:w-24 md:h-26 bg-(--brand-green-100) rounded-lg grid place-items-center">
      <p class="text-3xl md:text-5xl text-white text-center font-bold count-number">00</p>
    </div>
    <p class="text-center mt-2 text-sm md:text-lg font-bold count-label">DÃ­as</p>
  </div>

  <div class="w-16 h-26 md:w-24 md:h-32" id="hours-counter">
    <div class="w-16 h-18 md:w-24 md:h-26 bg-(--brand-green-100) rounded-lg grid place-items-center">
      <p class="text-3xl md:text-5xl text-white text-center font-bold count-number">00</p>
    </div>
    <p class="text-center mt-2 text-sm md:text-lg font-bold count-label">Horas</p>
  </div>

  <div class="w-16 h-26 md:w-24 md:h-32" id="minutes-counter">
    <div class="w-16 h-18 md:w-24 md:h-26 bg-(--brand-green-100) rounded-lg grid place-items-center">
      <p class="text-3xl md:text-5xl text-white text-center font-bold count-number">00</p>
    </div>
    <p class="text-center mt-2 text-sm md:text-lg font-bold count-label">Minutos</p>
  </div>

  <div class="w-16 h-26 md:w-24 md:h-32" id="seconds-counter">
    <div class="w-16 h-18 md:w-24 md:h-26 bg-(--brand-green-100) rounded-lg grid place-items-center">
      <p class="text-3xl md:text-5xl text-white text-center font-bold count-number">00</p>
    </div>
    <p class="text-center mt-2 text-sm md:text-lg font-bold count-label">Segundos</p>
  </div>
</div>

<script define:vars={{ targetDate }}>
  function updateCountdown() {
    const target = new Date(targetDate).getTime();
    const now = new Date().getTime();
    const timeLeft = target - now;

    if (timeLeft > 0) {
      const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
      const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

      const daysCounter = document.getElementById("days-counter");
      const hoursCounter = document.getElementById("hours-counter");
      const minutesCounter = document.getElementById("minutes-counter");
      const secondsCounter = document.getElementById("seconds-counter");

      if (daysCounter) {
        const daysNumber = daysCounter.querySelector(".count-number");
        if (daysNumber) daysNumber.textContent = days.toString().padStart(2, "0");
      }

      if (hoursCounter) {
        const hoursNumber = hoursCounter.querySelector(".count-number");
        if (hoursNumber) hoursNumber.textContent = hours.toString().padStart(2, "0");
      }

      if (minutesCounter) {
        const minutesNumber = minutesCounter.querySelector(".count-number");
        if (minutesNumber) minutesNumber.textContent = minutes.toString().padStart(2, "0");
      }

      if (secondsCounter) {
        const secondsNumber = secondsCounter.querySelector(".count-number");
        if (secondsNumber) secondsNumber.textContent = seconds.toString().padStart(2, "0");
      }
    } else {
      const daysCounter = document.getElementById("days-counter");
      const hoursCounter = document.getElementById("hours-counter");
      const minutesCounter = document.getElementById("minutes-counter");
      const secondsCounter = document.getElementById("seconds-counter");

      [daysCounter, hoursCounter, minutesCounter, secondsCounter].forEach((counter) => {
        if (counter) {
          const number = counter.querySelector(".count-number");
          if (number) number.textContent = "00";
        }
      });
    }
  }

  // Actualizar inmediatamente y luego cada segundo
  updateCountdown();
  setInterval(updateCountdown, 1000);
</script>
